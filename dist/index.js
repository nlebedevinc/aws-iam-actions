#! /usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const commander_1 = require("commander");
const https_1 = tslib_1.__importDefault(require("https"));
const IAM_ACTIONS = 'https://awspolicygen.s3.amazonaws.com/js/policies.js';
function normalize(raw) {
    return raw.substring(raw.indexOf("=") + 1);
}
async function request() {
    return new Promise((resolve) => {
        https_1.default.get(IAM_ACTIONS, res => {
            let data = [];
            res.on('data', chunk => {
                data.push(chunk);
            });
            res.on('end', () => {
                const temp = Buffer.concat(data).toString();
                const normalized = normalize(temp);
                resolve(JSON.parse(normalized));
            });
        });
    });
}
function find(query, data) {
    const { serviceMap } = data;
    for (let key in serviceMap) {
        const action = serviceMap[key];
        if (serviceMap[key].StringPrefix === query) {
            return { key: action };
        }
    }
    return null;
}
commander_1.program
    .version('0.0.1')
    .usage('[options] <serviceName>');
commander_1.program.parse(process.argv);
async function main() {
    const [serviceName] = commander_1.program.args;
    if (!serviceName) {
        throw new Error('Please provice AWS service name');
    }
    const actions = await request();
    const result = find(serviceName, actions);
    if (!result) {
        console.info(`AWS service ${serviceName} does not exist`);
        process.exit(0);
    }
    console.info(result);
}
main().catch(error => {
    console.error('An error occurred during receiving and processing AWS policy actions', error);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLHlDQUFvQztBQUVwQywwREFBMEI7QUFFMUIsTUFBTSxXQUFXLEdBQUcsc0RBQXNELENBQUM7QUFFM0UsU0FBUyxTQUFTLENBQUMsR0FBVztJQUMxQixPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBR0QsS0FBSyxVQUFVLE9BQU87SUFDbEIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQzNCLGVBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLElBQUksSUFBSSxHQUFzQixFQUFFLENBQUM7WUFFakMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsQ0FBQyxDQUFDLENBQUM7WUFFSCxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQ2YsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDNUMsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFZRCxTQUFTLElBQUksQ0FBQyxLQUFhLEVBQUUsSUFBbUI7SUFDNUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQztJQUU1QixLQUFLLElBQUksR0FBRyxJQUFJLFVBQVUsRUFBRTtRQUN4QixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxLQUFLLEtBQUssRUFBRTtZQUN4QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDO1NBQzFCO0tBQ0o7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBS0QsbUJBQU87S0FDRixPQUFPLENBQUMsT0FBTyxDQUFDO0tBQ2hCLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBRXRDLG1CQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUU1QixLQUFLLFVBQVUsSUFBSTtJQUNmLE1BQU0sQ0FBRSxXQUFXLENBQUUsR0FBRyxtQkFBTyxDQUFDLElBQUksQ0FBQztJQUVyQyxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0tBQ3REO0lBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLEVBQUUsQ0FBQztJQUNoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsV0FBVyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzFELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkI7SUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFFRCxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7SUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxzRUFBc0UsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNqRyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhIC91c3IvYmluL2VudiBub2RlXG5cbmltcG9ydCB7IHByb2dyYW0gfSBmcm9tICdjb21tYW5kZXInO1xuXG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xuXG5jb25zdCBJQU1fQUNUSU9OUyA9ICdodHRwczovL2F3c3BvbGljeWdlbi5zMy5hbWF6b25hd3MuY29tL2pzL3BvbGljaWVzLmpzJztcblxuZnVuY3Rpb24gbm9ybWFsaXplKHJhdzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gcmF3LnN1YnN0cmluZyhyYXcuaW5kZXhPZihcIj1cIikgKyAxKTtcbn1cblxuLy8gcmVxdWVzdGVyXG5hc3luYyBmdW5jdGlvbiByZXF1ZXN0KCk6IFByb21pc2U8QVdTQWN0aW9uRGF0YT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBodHRwcy5nZXQoSUFNX0FDVElPTlMsIHJlcyA9PiB7XG4gICAgICAgICAgICBsZXQgZGF0YTogQXJyYXk8VWludDhBcnJheT4gPSBbXTtcbiAgICBcbiAgICAgICAgICAgIHJlcy5vbignZGF0YScsIGNodW5rID0+IHtcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goY2h1bmspO1xuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gQnVmZmVyLmNvbmNhdChkYXRhKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemUodGVtcCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShKU09OLnBhcnNlKG5vcm1hbGl6ZWQpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuaW50ZXJmYWNlIEFjdGlvbkNvbnRlbnQge1xuICAgIFN0cmluZ1ByZWZpeDogc3RyaW5nO1xuICAgIEFjdGlvbnM6IEFycmF5PHN0cmluZz47XG4gICAgQVJOZm9ybWF0OiBzdHJpbmc7XG4gICAgQVJOcmVnZXg6IHN0cmluZztcbn1cblxudHlwZSBSZXNwb25zZSA9IHsgW25hbWU6IHN0cmluZ106IEFjdGlvbkNvbnRlbnQgfTtcbnR5cGUgQVdTQWN0aW9uRGF0YSA9IHsgc2VydmljZU1hcDogUmVzcG9uc2UgfTtcblxuZnVuY3Rpb24gZmluZChxdWVyeTogc3RyaW5nLCBkYXRhOiBBV1NBY3Rpb25EYXRhKTogUmVzcG9uc2UgfCBudWxsIHtcbiAgICBjb25zdCB7IHNlcnZpY2VNYXAgfSA9IGRhdGE7XG5cbiAgICBmb3IgKGxldCBrZXkgaW4gc2VydmljZU1hcCkge1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBzZXJ2aWNlTWFwW2tleV07XG4gICAgICAgIGlmIChzZXJ2aWNlTWFwW2tleV0uU3RyaW5nUHJlZml4ID09PSBxdWVyeSkge1xuICAgICAgICAgICAgcmV0dXJuIHsga2V5OiBhY3Rpb24gfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG4vLyB2YWxpZGF0ZSBwcm9jZXNzIHZhcnNcblxuLy8gZGVmaW5lIGEgcHJvZ3JhbVxucHJvZ3JhbVxuICAgIC52ZXJzaW9uKCcwLjAuMScpXG4gICAgLnVzYWdlKCdbb3B0aW9uc10gPHNlcnZpY2VOYW1lPicpO1xuXG5wcm9ncmFtLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgWyBzZXJ2aWNlTmFtZSBdID0gcHJvZ3JhbS5hcmdzO1xuXG4gICAgaWYgKCFzZXJ2aWNlTmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSBwcm92aWNlIEFXUyBzZXJ2aWNlIG5hbWUnKTtcbiAgICB9XG5cbiAgICBjb25zdCBhY3Rpb25zID0gYXdhaXQgcmVxdWVzdCgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGZpbmQoc2VydmljZU5hbWUsIGFjdGlvbnMpO1xuXG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKGBBV1Mgc2VydmljZSAke3NlcnZpY2VOYW1lfSBkb2VzIG5vdCBleGlzdGApO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgfVxuXG4gICAgY29uc29sZS5pbmZvKHJlc3VsdCk7XG59XG5cbm1haW4oKS5jYXRjaChlcnJvciA9PiB7XG4gICAgY29uc29sZS5lcnJvcignQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHJlY2VpdmluZyBhbmQgcHJvY2Vzc2luZyBBV1MgcG9saWN5IGFjdGlvbnMnLCBlcnJvcik7XG59KTsiXX0=